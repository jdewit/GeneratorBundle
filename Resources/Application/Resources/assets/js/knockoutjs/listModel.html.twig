function {{ entity_cc }}ListModel({{ entity_cc }}s) {
    var self = this;
    self.{{ entity_cc }}s = ko.observableArray({{ entity_cc }}s);
    self.checkAll = ko.observable(false);
    self.filter = ko.observable('Recent');
    self.updateFilter = function(data, event, filter) {
        self.filter(filter);
        href = event.currentTarget.href; 
        showSpinner();
        $.ajax({
            type: 'post',
            dataType: 'json',
            url: href,
            success: function(response){
                hideSpinner();
                self.{{ entity_cc }}s(response['data']);
            }
        });
    };
    self.search = function(data, event) {
        href = event.currentTarget.href; 
        var target = $('#{{ entity_cc }}-search-form-container');
        if (!target.length) {
            showSpinner();
            $.ajax({
                dataType: 'html',
                url: href,
                async: false,
                success: function(response){
                    hideSpinner();
                    $('body').append(response);
                }
            });
            var target = $('#{{ entity_cc }}-search-form-container');
            createDialog(target, 'Search {{ entity_cc | camelCaseToTitle }}', true, 500);
        } else {
            target.dialog('open');
        }
        var form = target.find('form');
        form.ajaxForm({
            dataType:  'json',
            beforeSubmit: function() {
                showSpinner();
            },
            success:   function(response){
                hideSpinner();
                if (response['status'] == "OK") {
                    createNotice(response['notice']);
                    form.parents('.ui-dialog-content').dialog('close');
                    self.{{ entity_cc }}s(response['data']);
                    self.filter('All');
                } else {
                    $.each(response['data'], function(field, message) {
                        form.prepend('<div class="error">'+ message +'</div>');
                        form.find('#{{ bundle_alias }}_{{ entity_cc }}_'+ field).parents('.control-group').addClass('error');
                    });
                }
            }
        });
    }

    self.new{{ entity }} = function(data, event) { 
        var target = $('.{{ entity_cc }}-form-container:last');
        self.{{ entity_cc }}Model.set{{ entity }}(null); 
        self.bindForm(target);
        createDialog(target, 'New {{ entity | camelCaseToTitle}}', true, 500);
    };
    self.edit{{ entity }} = function(data, event) { 
        var target = $('.{{ entity_cc }}-form-container:last');
        self.{{ entity_cc }}Model.set{{ entity }}(data);
        self.bindForm(target);
        createDialog(target, 'Edit {{ entity | camelCaseToTitle}}', true, 500);
    };
    self.batchEdit = function(data, event) {
        href = event.currentTarget.href; 
        var checked = $('#{{ entity_cc }}-table input.selector:checked');
        if (checked.length) {
            checked.each(function() {
                showSpinner();
                var id = $(this).val();
                $.ajax({
                    type: 'post',
                    dataType: 'html',
                    url: href +'/'+ id,
                    success: function(response){
                        hideSpinner();
                        //attach response to body and run javascript
                        $('body').append('<div id="{{ entity_cc }}-'+ id +'">'+ response +'</div>');
                        eval($('#{{ entity_cc }}-'+ id + ' script[type="text/html"]').text());
                        var target = $('#{{ entity_cc }}-'+ id +' .{{ entity_cc }}-form-container');
                        self.bindForm(target);
                        createDialog(target, 'Edit {{ entity | camelCaseToTitle }}', true, '500', true);
                    }
                });
            });
        } else {
            alert('No {{ entity_cc | camelCaseToTitle | lower }}s were selected');
        }
    }
    self.delete{{ entity }} = function(data, event) { 
        href = event.currentTarget.href; 
        if (confirm("Are you sure you want to delete this {{ entity | camelCaseToTitle}}?")) {
            $.ajax({
                type: 'post',
                dataType: 'json',
                url: href,
                success: function(response){
                    createNotice(response['notice']);
                    self.{{ entity_cc }}s.remove(function({{ entity_cc }}) { return {{ entity_cc }}.id == response['data']['id']; })
                }
            });
        }
    };
    self.batchDelete = function(data, event) {
        var checked = $('#{{ entity_cc }}-table input.selector:checked');
        if (checked.length) {
            if (confirm("Are you sure you want to delete these {{ entity_cc | camelCaseToTitle | lower }}s?")) {
                href = event.currentTarget.href; 
                showSpinner();
                $.ajax({
                    type: 'post',
                    dataType: 'json',
                    url: href,
                    data: checked,
                    success: function(response){
                        hideSpinner();
                        createNotice(response['notice']);
                        checked.each(function() {
                            var id = $(this).val();
                            self.{{ entity_cc }}s.remove(function({{ entity_cc }} ) { return {{ entity_cc }}.id == id; });
                        });
                    }
                });
            }
        } else {
            alert('No {{ entity_cc | camelCaseToTitle | lower }}s selected');
        }
    }
    self.restore{{ entity }} = function(data, event) { 
        href = event.currentTarget.href; 
            $.ajax({
                type: 'post',
                dataType: 'json',
                url: href,
                success: function(response){
                    createNotice(response['notice']);
                    self.{{ entity_cc }}s.remove(function({{ entity_cc }}) { return {{ entity_cc }}.id == response['data']['id']; })
                }
            });
    };
    self.batchRestore = function(data, event) {
        var checked = $('#{{ entity_cc }}-table input.selector:checked');
        if (checked.length) {
            if (confirm("Are you sure you want to restore these {{ entity_cc | camelCaseToTitle | lower }}s?")) {
                href = event.currentTarget.href; 
                showSpinner();
                $.ajax({
                    type: 'post',
                    dataType: 'json',
                    url: href,
                    data: checked,
                    success: function(response){
                        hideSpinner();
                        createNotice(response['notice']);
                        checked.each(function() {
                            var id = $(this).val();
                            self.{{ entity_cc }}s.remove(function({{ entity_cc }}) { return {{ entity_cc }}.id == id; });
                        });
                    }
                });
            }
        } else {
            alert('No {{ entity_cc | camelCaseToTitle | lower }}s selected');
        }
    }

    self.bindForm = function(target) {
        var form = target.find('form');
        form.ajaxForm({
            dataType:  'json',
            beforeSubmit: function() {
                showSpinner();
            },
            success:   function(response){
                hideSpinner();
                if (response['status'] == "OK") {
                    createNotice(response['notice']);
                    form.parents('.ui-dialog-content').dialog('close');
                    self.{{ entity_cc }}s.remove(function( {{ entity_cc }} ) { return {{ entity_cc }}.id == response['data']['id']; });
                    self.{{ entity_cc }}s.push(response['data']);
                } else {
                    $.each( response['data'], function(field, message) {
                        form.prepend('<div class="error">'+ message +'</div>');
                        form.find('#{{ bundle_alias }}_{{ entity_cc }}_'+ field).parents('.control-group').addClass('error');
                    });
                }
            }
        });
    };
}

