function {{ entity_cc }}Model(options) {
    var self = this;
    self.{{ entity_cc }} = options.{{ entity_cc }} || null,
    self.list = options.list || null; 

    self.dialogOptions = ko.observable({});
    self.{{ entity_cc }}Id = ko.observable();
{% for field in fields %}
{% if field.type == 'oneToMany' %}
    self.{{ field.fieldName }} = ko.observableArray();
{% elseif field.type == 'manyToOne' %}
    self.selected{{ field.fieldName|ucFirst }} = ko.observable();
{% else %}
    self.{{ field.fieldName }} = ko.observable();
{% endif %}
{% endfor %}
    self.isDeleted = ko.observable();

    self.set{{ entity }} = function({{ entity_cc }}) {
        if ({{ entity_cc }}) {
            self.{{ entity_cc }}Id({{ entity_cc }}.id);
{% for field in fields %}
{% if field.fieldName == 'date' %}
            self.{{ field.fieldName }}({{ entity_cc }}.{{ field.fieldName }});
{% elseif field.type == 'manyToOne' %}
            self.selected{{ field.fieldName|ucFirst }}({{ entity_cc }}.{{ field.fieldName }} ? {{ entity_cc }}.{{ field.fieldName }}.id : null);
{% elseif field.type == 'datetime' %}
            self.{{ field.fieldName }}({{ entity_cc }}.{{ field.fieldName }});
{% else %}
            self.{{ field.fieldName }}({{ entity_cc }}.{{ field.fieldName }});
{% endif %}
{% endfor %}
            self.isDeleted({{ entity_cc }}.isDeleted);

            self.dialogOptions({title: 'Edit {{ entity_cc | camelCaseToTitle }}', width: '50%'});
        } else {
            self.{{ entity_cc }}Id(null);
{% for field in fields %}
{% if field.fieldName == 'date' %}
            self.{{ field.fieldName }}(avro.getTodaysDate());
{% elseif field.type == 'manyToOne' %}
            self.selected{{ field.fieldName|ucFirst }}(null);
{% elseif field.type == 'datetime' %}
            self.{{ field.fieldName }}(avro.getTodaysDate());
{% else %}
            self.{{ field.fieldName }}(null);
{% endif %}
{% endfor %}
            self.isDeleted(false);
            self.dialogOptions({title: 'New {{ entity_cc | camelCaseToTitle }}', width: '50%'});
        }
    }

    self.bindForm = function(form) {
        var $form = $(form);
        $form.avroAjaxSubmit({
            success: function(response){
                if (response['status'] == "OK") {
                    avro.createNotice(response['notice']);
                    if (self.list.dialogQueue.queue('dialogs').length === 0) {
                        avro.ajaxManager.clearCache();
                        self.list.offset.valueHasMutated();
                    }
                    $form.closest('.ui-dialog-content').dialog('close');
                } else {
                    $.each( response['data'], function(field, message) {
                        $form.find('#error-container').append('<i class="sprite-error"></i> '+ message +'.').show();
                        $form.find('#{{ bundle_alias }}_{{ entity_cc }}_'+ field).closest('.control-group').addClass('error');
                    });
                }
            }
        });
    };
}


